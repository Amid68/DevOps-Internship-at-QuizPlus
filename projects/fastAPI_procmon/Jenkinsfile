node {
    docker.image('amid68/jenkins-agent-with-dockerio') { c ->
    def branchEnvironmentMap = [
        'main': 'prod',
        'dev': 'dev'
    ]

    def currentBranch = env.BRANCH_NAME ?: 'unkown'
    def environment = branchEnvironmentMap[currentBranch]

    if (!environment) {
        error("Unsupported branch: ${currentBranch}. Supported branches: ${branchEnvironmentMap.keySet()}")
    }

    echo "Building branch '${currentBranch}' for '${environment}' environment"

    def imageName = 'fastapi-procmon'
    def imageTag = "${BUILD_NUMBER}"
    def dockerHubRepo = 'amid68/fastapi-procmon'
    def dockerHubTag = "${environment}-${imageTag}"
    def fullImageName = "${dockerHubRepo}:${dockerHubTag}"

    try {
        stage('Checkout') {
            echo "🔄 Checking out repository for branch: ${currentBranch}"
            echo "🎯 Target environment: ${environment}"
    
            checkout([
                $class: 'GitSCM',
                branches: [[name: "*/${currentBranch}"]],
                userRemoteConfigs: [[
                    url: 'https://github.com/Amid68/DevOps-Internship-at-QuizPlus.git',
                    credentialsId: 'github-credentials'
                ]],
            ])
    
            // Jenkins-aware branch verification
            echo "✅ Successfully checked out ${currentBranch} branch"
            echo "📝 Commit: ${env.GIT_COMMIT ?: 'unknown'}"
    
            // Alternative verification using git log (works with detached HEAD)
            def commitBranch = sh(
                script: "git log --oneline --decorate -1 | grep -o 'origin/${currentBranch}' || echo 'detached'",
                returnStdout: true
            ).trim()
    
            if (commitBranch.contains(currentBranch)) {
                echo "✅ Verified: Building commit from ${currentBranch} branch"
            } else {
                echo "ℹ️  Note: Building in detached HEAD state (normal for Jenkins multibranch)"
                echo "ℹ️  Jenkins environment confirms this is ${currentBranch} branch build"
            }
        }
 
        stage('Build Docker Image') {
            echo "Building Docker image: ${fullImageName}"
            sh """
                cd projects/fastAPI_procmon/
                docker build -t ${fullImageName} .
                
            """
        }
        
        stage('Test /healthz Endpoint') {
            echo "Testing the /processes endpoint..."
            sh """
                # Start test container
                docker run -d --name fastapi-test-${environment}-${BUILD_NUMBER} ${fullImageName}
                sleep 15
                
                # Verify container is running
                docker ps | grep fastapi-test-${environment}-${BUILD_NUMBER} || exit 1
                echo "✅ Container running"
                
                # Install curl in container
                docker exec fastapi-test-${environment}-${BUILD_NUMBER} sh -c "apt-get update -qq && apt-get install -y curl -qq" 2>/dev/null
             
                # Test /healthz endpoint with HTTP status check
		        HTTP_STATUS=\$(docker exec fastapi-test-${environment}-${BUILD_NUMBER} curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/healthz)
		        echo "HTTP Status Code: \$HTTP_STATUS"

		        # Check if we got a successful response (200)
		        if [ "\$HTTP_STATUS" = "200" ]; then
			        echo "✅ Health check endpoint responding successfully"
		        else
			        echo "❌ Health check failed with status code: \$HTTP_STATUS"
			        exit 1
		        fi                
            """
        }
        
        stage('Cleanup Test Container') {
            sh "docker stop fastapi-test-${environment}-${BUILD_NUMBER} && docker rm fastapi-test-${environment}-${BUILD_NUMBER}"
        }
        
        stage('Push to Docker Hub') {
            echo "Pushing to Docker Hub..."
            withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                sh """
                    # Login to Docker Hub
                    echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin
                    
                    docker push ${fullImageName}
                    
                    # Verify the push was successful
                    echo "✅ Successfully pushed to Docker Hub:"
                    echo "   Repository: ${dockerHubRepo}"
                    echo "   Tag: ${dockerHubTag}"
                    echo "   Full image: ${fullImageName}"
            
                    # Logout for security
                    docker logout
                """
            }
        }
        
        stage('Cleanup Local Images') {
            echo "Cleaning up local images..."
            sh """
                # Keep only the latest 3 builds locally
                docker images ${imageName} --format "table {{.Tag}}" | grep -E '^[0-9]+\$' | sort -nr | tail -n +4 | xargs -r -I {} docker rmi ${imageName}:{} || true
            """
        }
        
        echo "🎉 Pipeline completed successfully!"
        echo "✅ Built: ${imageName}:${imageTag}"
        echo "✅ /processes endpoint tested and working"
        echo "✅ Pushed to Docker Hub: ${dockerHubRepo}"
        
    } catch (Exception e) {
        echo "❌ Pipeline failed: ${e.getMessage()}"
        sh "docker stop fastapi-test-${BUILD_NUMBER} 2>/dev/null || true"
        sh "docker rm fastapi-test-${BUILD_NUMBER} 2>/dev/null || true"
        throw e
    }
    }
}
