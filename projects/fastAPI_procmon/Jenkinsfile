node {
    docker.image('amid68/jenkins-agent-with-dockerio').inside('-v /var/run/docker.sock:/var/run/docker.sock --group-add 988') {
	    def config = [
	        'prod': [
                'branch': 'main',
                'environment': 'production',
            ],
	        'dev': [
                'branch': 'dev',
                'environment': 'development',
            ]
	    ]
	
	    def currentBranch = env.BRANCH_NAME ?: 'unknown'
        def environmentConfig = config.find { key, value -> value.branch == currentBranch }?.value
        def environment = environmentConfig?.environment  
	
	    if (!environmentConfig) {
	        error("Unsupported branch: ${currentBranch}.")
	    }
	
	    echo "Building branch '${currentBranch}' for '${environment}' environment"
	
	    def imageTag = "${BUILD_NUMBER}"
	    def dockerHubRepo = 'amid68/fastapi-procmon'
	    def dockerHubTag = "${environment}-${imageTag}"
	    def fullImageName = "${dockerHubRepo}:${dockerHubTag}"
	
	    try {
	        stage('Checkout') {
	            checkout([
	                $class: 'GitSCM',
	                branches: [[name: "*/${currentBranch}"]],
	                userRemoteConfigs: [[
	                    url: 'https://github.com/Amid68/DevOps-Internship-at-QuizPlus.git',
	                    credentialsId: 'github-credentials'
	                ]],
	            ])
	        }
	 
	        stage('Build Docker Image') {
		        withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
		            sh """
		                cd projects/fastAPI_procmon/
		                
		                # Setup QEMU emulation for cross-platform builds
		                docker run --rm --privileged tonistiigi/binfmt --install all
		                
		                # Create buildx builder with multi-platform support  
		                docker buildx create --name multiarch --driver docker-container --platform linux/amd64,linux/arm64 --use || true
		                docker buildx inspect --bootstrap
		                
		                echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin
		                docker buildx build \\
		                    --platform linux/amd64,linux/arm64 \\
		                    -t ${fullImageName} \\
		                    --push \\
		                    .
		            """
		        }
		    }
	        
	        stage('Test /healthz Endpoint') {
		        sh """
		            docker run -d --name fastapi-test-${environment}-${BUILD_NUMBER} --platform linux/arm64 ${fullImageName}
		            
		            docker ps | grep fastapi-test-${environment}-${BUILD_NUMBER} || exit 1
		            
		            docker exec fastapi-test-${environment}-${BUILD_NUMBER} sh -c "apt-get update -qq && apt-get install -y curl -qq" 2>/dev/null
		         
		            HTTP_STATUS=\$(docker exec fastapi-test-${environment}-${BUILD_NUMBER} curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/healthz)
		
		            if [ "\$HTTP_STATUS" = "200" ]; then
		                echo "✅ Health check endpoint responding successfully"
		            else
		                echo "❌ Health check failed with status code: \$HTTP_STATUS"
		                exit 1
		            fi                
		        """
		    }
	        
	        stage('Cleanup Local Images') {
		        sh """
		            docker buildx prune -f --filter until=24h || true
		            
		            docker images ${dockerHubRepo} --format "table {{.Repository}}:{{.Tag}}" | grep -v REPOSITORY | head -n -3 | xargs -r docker rmi || true
		        """
		    }

            stage('Deploy to EC2 Server with Ansible') {
		        echo "🚀 Deploying ${fullImageName} to EC2 server using Ansible..."
		    
		        withCredentials([sshUserPrivateKey(
		            credentialsId: 'ec2-server-ssh-key',
		            keyFileVariable: 'SSH_KEY',
		            usernameVariable: 'SSH_USER'
		        )]) {
		            sh '''
		                cd projects/fastAPI_procmon/ansible
		            
		                # Copy SSH key to temporary location for Ansible
		                cp ${SSH_KEY} /tmp/ssh_key
		                chmod 600 /tmp/ssh_key
		            
		                if ansible ec2_servers -m ping; then
		                    ansible-playbook deploy.yml \
		                        -e "image_name=''' + fullImageName + '''" \
		                        -e "deployment_environment=''' + environment + '''" \
		                        -v
		                
		                    echo "🌐 Application should be available at: http://13.53.43.243:8000"
		                else
		                    echo "❌ Ansible connectivity failed, skipping deployment"
		                    exit 1
		                fi
		            
		                # Cleanup temporary SSH key
		                rm -f /tmp/ssh_key
		            '''
		        }
		    }
	        
	        stage('Cleanup Local Images') {
	            sh """
	                # Keep only the latest 3 builds locally
	                docker images ${dockerHubRepo} --format "table {{.Tag}}" | grep -E '^(development|production)-[0-9]+\$' | sort -nr | tail -n +4 | xargs -r -I {} docker rmi ${dockerHubRepo}:{} || true
	            """
	        }
	        
	        echo "🎉 Pipeline completed successfully!"
	        echo "✅ Built: ${fullImageName}"
	        echo "✅ /healthz endpoint tested and working"
	        echo "✅ Pushed to Docker Hub: ${dockerHubRepo}"
	        
	    } catch (Exception e) {
	        echo "❌ Pipeline failed: ${e.getMessage()}"
	        sh "docker stop fastapi-test-${environment}-${BUILD_NUMBER} 2>/dev/null || true"
	        sh "docker rm fastapi-test-${environment}-${BUILD_NUMBER} 2>/dev/null || true"
	        throw e
	    }
    }
}
