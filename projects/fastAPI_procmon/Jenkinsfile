node('docker') {
    def imageName = 'fastapi-procmon'
    def imageTag = "${BUILD_NUMBER}"
    
    try {
        stage('Cleanup Workspace') {
            echo "Cleaning workspace..."
            deleteDir()
        }
        
        stage('Checkout') {
            echo "Checking out repository..."
            checkout([
                $class: 'GitSCM',
                branches: [[name: '*/fastAPI_Process_Monitor']],
                userRemoteConfigs: [[
                    url: 'https://github.com/Amid68/DevOps-Internship-at-QuizPlus.git',
                    credentialsId: 'github-credentials'
                ]]
            ])
        }
        
        stage('Navigate to App Directory') {
            echo "Current directory contents:"
            sh 'ls -la'
            
            echo "App directory contents:"
            sh 'ls -la projects/fastAPI_procmon/'
            
            // Verify required files exist
            sh '''
                cd projects/fastAPI_procmon/
                if [ -f "Dockerfile" ]; then
                    echo "✅ Dockerfile found"
                else
                    echo "❌ Dockerfile not found"
                    exit 1
                fi
                
                if [ -f "main.py" ]; then
                    echo "✅ main.py found"
                else
                    echo "❌ main.py not found"
                    exit 1
                fi
                
                if [ -f "requirements.txt" ]; then
                    echo "✅ requirements.txt found"
                else
                    echo "❌ requirements.txt not found"
                    exit 1
                fi
            '''
        }
        
        stage('Build Docker Image') {
            echo "Building Docker image: ${imageName}:${imageTag}"
            
            sh """
                cd projects/fastAPI_procmon/
                docker build -t ${imageName}:${imageTag} .
                docker build -t ${imageName}:latest .
            """
            
            echo "Listing built images:"
            sh "docker images | grep ${imageName}"
        }
        
        stage('Test Docker Image') {
            echo "Testing the Docker image (internal container testing)..."
            
            sh """
                # Run container without port exposure for testing
                docker run -d --name fastapi-test-${BUILD_NUMBER} ${imageName}:${imageTag}
                
                # Wait for startup
                sleep 10
                
                # Check if container is running
                if docker ps | grep fastapi-test-${BUILD_NUMBER}; then
                    echo "✅ Container is running successfully"
                else
                    echo "❌ Container failed to start"
                    docker logs fastapi-test-${BUILD_NUMBER}
                    exit 1
                fi
                
                # Install curl in container if needed and test internally
                echo "Testing application endpoints internally..."
                docker exec fastapi-test-${BUILD_NUMBER} sh -c "
                    # Try to install curl if not available
                    apt-get update -qq && apt-get install -y curl -qq 2>/dev/null || echo 'Using wget instead'
                    
                    # Test the health endpoint
                    if command -v curl >/dev/null 2>&1; then
                        curl -f http://localhost:8000/ || curl -f http://127.0.0.1:8000/ || echo 'Curl test completed with issues'
                    else
                        # Fallback to wget or python
                        wget -q -O- http://localhost:8000/ || python3 -c 'import urllib.request; print(urllib.request.urlopen(\"http://localhost:8000/\").read().decode())' || echo 'Health check completed'
                    fi
                "
                
                # Check logs for any errors
                echo "Container logs:"
                docker logs fastapi-test-${BUILD_NUMBER}
                
                # Verify the container is still running after tests
                if docker ps | grep fastapi-test-${BUILD_NUMBER}; then
                    echo "✅ Container remained stable during testing"
                else
                    echo "❌ Container stopped during testing"
                    exit 1
                fi
            """
        }
        
        stage('Cleanup Test Container') {
            echo "Cleaning up test container..."
            sh """
                docker stop fastapi-test-${BUILD_NUMBER} || true
                docker rm fastapi-test-${BUILD_NUMBER} || true
            """
        }
        
        stage('Final Verification') {
            echo "Verifying final image..."
            sh """
                # Quick smoke test with temporary container
                docker run --rm ${imageName}:${imageTag} python -c "import main; print('✅ Application imports successfully')"
                echo "✅ Image verification completed"
            """
        }
        
        echo "✅ Pipeline completed successfully!"
        echo "Built image: ${imageName}:${imageTag}"
        echo "Image ready for deployment"
        
    } catch (Exception e) {
        echo "❌ Pipeline failed: ${e.getMessage()}"
        
        // Cleanup on failure
        sh """
            docker stop fastapi-test-${BUILD_NUMBER} || true
            docker rm fastapi-test-${BUILD_NUMBER} || true
        """
        
        throw e
    }
}
