---
- name: Deploy FastAPI Application with Docker
  hosts: ec2_servers
  become: true
  gather_facts: true
  vars:
    app_name: "fastapi-procmon"
    container_name: "{{ app_name }}-{{ deployment_environment }}"
    docker_image: "{{ image_name }}"
    app_port: 8000
    host_port: 8000
    docker_packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    old_docker_packages:
      - docker.io
      - docker-doc
      - docker-compose
      - docker-compose-v2
      - podman-docker
      - containerd
      - runc

  handlers:
    - name: reset_connection
      meta: reset_connection

  tasks:
    - name: Check if Docker is installed
      command: docker --version
      register: docker_installed
      failed_when: false
      changed_when: false
      become_user: ubuntu

    - name: Install Docker (if not present)
      block:
        - name: Remove old Docker packages
          package:
            name: "{{ old_docker_packages }}"
            state: absent
          ignore_errors: true

        - name: Install prerequisites
          package:
            name:
              - ca-certificates
              - curl
              - gnupg
              - lsb-release
            state: present
            update_cache: yes

        - name: Create keyrings directory
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: Download Docker GPG key
          get_url:
            url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
            dest: /etc/apt/keyrings/docker.asc
            mode: '0644'

        - name: Add Docker repository
          apt_repository:
            repo: "deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
            state: present
            filename: docker
            update_cache: yes

        - name: Install Docker packages
          package:
            name: "{{ docker_packages }}"
            state: present

      when: docker_installed.rc != 0

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes
      notify: reset_connection

    - name: Force all notified handlers to run
      meta: flush_handlers

    - name: Stop existing container (if running)
      docker_container:
        name: "{{ container_name }}"
        state: stopped
      ignore_errors: true
      become_user: ubuntu

    - name: Remove existing container (if exists)
      docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: true
      become_user: ubuntu

    - name: Pull Docker image
      docker_image:
        name: "{{ docker_image }}"
        source: pull
        force_source: true
      become_user: ubuntu

    - name: Start new container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ docker_image }}"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ host_port }}:{{ app_port }}"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:{{ app_port }}/healthz"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 40s
        env:
          ENVIRONMENT: "{{ deployment_environment | default('production') }}"
      become_user: ubuntu

    - name: Wait for application to be healthy
      uri:
        url: "http://{{ ansible_host }}:{{ host_port }}/healthz"
        method: GET
        status_code: 200
      retries: 10
      delay: 5
      until: result.status == 200
      register: result
