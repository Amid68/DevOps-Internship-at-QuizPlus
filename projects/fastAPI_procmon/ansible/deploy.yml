---
- name: Deploy FastAPI Application with Docker
  hosts: ec2_servers
  become: true
  gather_facts: true  # Changed to true since we need distribution info
  vars:
    app_name: "fastapi-procmon"
    container_name: "{{ app_name }}-{{ deployment_environment }}"
    docker_image: "{{ image_name }}"
    app_port: 8000
    host_port: 8000
  tasks:
    # Remove old Docker packages
    - name: Remove old Docker packages
      shell: |
        for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do
          apt-get remove -y $pkg 2>/dev/null || true
        done
      ignore_errors: true

    # Update apt and install prerequisites
    - name: Update apt and install prerequisites
      shell: |
        apt-get update
        apt-get install -y ca-certificates curl

    # Create keyrings directory and download GPG key
    - name: Setup Docker repository
      shell: |
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc
      args:
        creates: /etc/apt/keyrings/docker.asc

    # Add Docker repository
    - name: Add Docker repository to Apt sources
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    # Update apt and install Docker
    - name: Install Docker
      shell: |
        apt-get update
        apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    # Start and enable Docker service
    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    # Add ubuntu user to docker group
    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    # Reset SSH connection to pick up new group membership
    - name: Reset connection
      meta: reset_connection

    # Verify Docker installation
    - name: Verify Docker is working
      command: docker --version
      register: docker_version
      become_user: ubuntu

    - name: Display Docker version
      debug:
        msg: "Docker version: {{ docker_version.stdout }}"

    # Application deployment tasks
    - name: Stop existing container (if running)
      docker_container:
        name: "{{ container_name }}"
        state: stopped
      ignore_errors: true
      register: stop_result
      become_user: ubuntu

    - name: Remove existing container (if exists)
      docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: true
      register: remove_result
      become_user: ubuntu

    - name: Pull Docker image
      docker_image:
        name: "{{ docker_image }}"
        source: pull
        force_source: true
      register: pull_result
      become_user: ubuntu

    - name: Start new container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ docker_image }}"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ host_port }}:{{ app_port }}"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:{{ app_port }}/healthz"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 40s
      register: container_result
      become_user: ubuntu

    - name: Display container status
      debug:
        msg: "Container {{ container_name }} is {{ container_result.container.State.Status }}"
