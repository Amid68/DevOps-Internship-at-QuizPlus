---
# deploy-zero-downtime.yml
- name: Deploy FastAPI Application with Zero Downtime
  hosts: ec2_servers
  become: true
  gather_facts: true
  vars:
    app_name: "fastapi-procmon"
    blue_container: "{{ app_name }}-blue"
    green_container: "{{ app_name }}-green"
    docker_image: "{{ image_name }}"
    app_port: 8000
    blue_port: 8001
    green_port: 8002
    public_port: 443
    deployment_environment: "{{ deployment_environment }}"
    health_check_retries: 30
    health_check_delay: 2

  tasks:
    - name: Identify currently active container
      shell: |
        if docker ps --format "table {{.Names}}" | grep -q "{{ blue_container }}"; then
          echo "blue"
        elif docker ps --format "table {{.Names}}" | grep -q "{{ green_container }}"; then
          echo "green"
        else
          echo "none"
        fi
      register: active_container
      become_user: ubuntu

    - name: Set deployment targets
      set_fact:
        new_container: "{{ 'green' if active_container.stdout == 'blue' else 'blue' }}"
        old_container: "{{ active_container.stdout if active_container.stdout != 'none' else '' }}"
        new_container_name: "{{ green_container if active_container.stdout == 'blue' else blue_container }}"
        old_container_name: "{{ blue_container if active_container.stdout == 'blue' else green_container }}"
        new_port: "{{ green_port if active_container.stdout == 'blue' else blue_port }}"
        old_port: "{{ blue_port if active_container.stdout == 'blue' else green_port }}"

    - name: Display deployment strategy
      debug:
        msg: 
          - "Current active: {{ active_container.stdout }}"
          - "Deploying to: {{ new_container }}"
          - "New container: {{ new_container_name }} on port {{ new_port }}"

    - name: Pull new Docker image
      docker_image:
        name: "{{ docker_image }}"
        source: pull
        force_source: true
      become_user: ubuntu

    - name: Start new container on staging port
      docker_container:
        name: "{{ new_container_name }}"
        image: "{{ docker_image }}"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ new_port }}:{{ app_port }}"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:{{ app_port }}/healthz"]
          interval: 10s
          timeout: 5s
          retries: 3
          start_period: 30s
        env:
          ENVIRONMENT: "{{ deployment_environment }}"
          CONTAINER_COLOR: "{{ new_container }}"
      become_user: ubuntu

    - name: Wait for new container to be healthy
      uri:
        url: "http://localhost:{{ new_port }}/healthz"
        method: GET
        status_code: 200
      retries: "{{ health_check_retries }}"
      delay: "{{ health_check_delay }}"
      until: result.status == 200
      register: result

    - name: Run smoke tests on new container
      uri:
        url: "http://localhost:{{ new_port }}/processes"
        method: GET
        status_code: 200
      register: smoke_test

    - name: Verify smoke test response
      assert:
        that:
          - smoke_test.status == 200
          - smoke_test.json is defined
        fail_msg: "Smoke tests failed on new container"

    - name: Install nginx if not present
      package:
        name: nginx
        state: present

    - name: Configure nginx for blue-green deployment
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/fastapi
        mode: '0644'
      vars:
        backend_port: "{{ new_port }}"

    - name: Enable nginx site
      file:
        src: /etc/nginx/sites-available/fastapi
        dest: /etc/nginx/sites-enabled/fastapi
        state: link

    - name: Test nginx configuration
      command: nginx -t
      register: nginx_test

    - name: Reload nginx to switch traffic
      systemd:
        name: nginx
        state: reloaded
      when: nginx_test.rc == 0

    - name: Verify application is accessible through nginx
      uri:
        url: "http://localhost:{{ public_port }}/healthz"
        method: GET
        status_code: 200
      retries: 5
      delay: 1

    - name: Wait for connections to drain from old container
      pause:
        seconds: 10
      when: old_container != ''

    - name: Stop old container
      docker_container:
        name: "{{ old_container_name }}"
        state: stopped
      when: old_container != ''
      become_user: ubuntu

    - name: Remove old container
      docker_container:
        name: "{{ old_container_name }}"
        state: absent
      when: old_container != ''
      become_user: ubuntu

    - name: Clean up old Docker images
      shell: |
        docker image prune -f
        docker images | grep "{{ app_name }}" | tail -n +4 | awk '{print $3}' | xargs -r docker rmi -f
      become_user: ubuntu
      ignore_errors: true

    - name: Display deployment summary
      debug:
        msg:
          - "‚úÖ Deployment completed successfully!"
          - "üü¢ Active container: {{ new_container_name }}"
          - "üåê Application URL: http://{{ ansible_host }}:{{ public_port }}"
          - "üìä Health endpoint: http://{{ ansible_host }}:{{ public_port }}/healthz"
          - "üöÄ Zero downtime achieved!"
