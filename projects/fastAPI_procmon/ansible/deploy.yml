---
- name: Deploy FastAPI Application with Docker
  hosts: ec2_servers
  become: true
  gather_facts: false
  vars:
    app_name: "fastapi-procmon"
    container_name: "{{ app_name }}-{{ deployment_environment }}"
    docker_image: "{{ image_name }}"
    app_port: 8000
    host_port: 8000

  tasks:
    - name: Update apt package index
      apt:
        update_cache: yes
      
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        
    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
        
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        
    - name: Install Docker CE
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        
    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
        
    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes
        
    # Reset SSH connection to pick up new group membership
    - name: Reset connection
      meta: reset_connection
      
    - name: Stop existing container (if running)
      docker_container:
        name: "{{ container_name }}"
        state: stopped
      ignore_errors: true
      register: stop_result

    - name: Remove existing container (if exists)
      docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: true
      register: remove_result

    - name: Pull Docker image
      docker_image:
        name: "{{ docker_image }}"
        source: pull
        force_source: true
      register: pull_result

    - name: Start new container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ docker_image }}"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ host_port }}:{{ app_port }}"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:{{ app_port }}/healthz"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 40s
      register: container_result

